calculator.parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "digits": parse_digits,
        "exp": parse_exp,
        "expr_add": parse_expr_add,
        "expr_and": parse_expr_and,
        "expr_com": parse_expr_com,
        "expr_equ": parse_expr_equ,
        "expr_ior": parse_expr_ior,
        "expr_lnd": parse_expr_lnd,
        "expr_lor": parse_expr_lor,
        "expr_mul": parse_expr_mul,
        "expr_pri": parse_expr_pri,
        "expr_rel": parse_expr_rel,
        "expr_sel": parse_expr_sel,
        "expr_set": parse_expr_set,
        "expr_shr": parse_expr_shr,
        "expr_unr": parse_expr_unr,
        "expr_xor": parse_expr_xor,
        "identifyer": parse_identifyer,
        "integer": parse_integer,
        "number": parse_number,
        "start": parse_start
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result10 = parse_expr_set();
        var result3 = result10 !== null ? result10 : '';
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ";") {
              var result7 = ";";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\";\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_set();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result7 = ";";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_set();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
          	for (var i = 0; i < rhs.length; i += 1) {
          		lhs = rhs[i][3];
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_pri() {
        var cacheKey = 'expr_pri@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result28 = parse_identifyer();
        var result19 = result28 !== null ? result28 : '';
        if (result19 !== null) {
          var result20 = parse__();
          if (result20 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result21 = "(";
              pos += 1;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result21 !== null) {
              var result22 = parse__();
              if (result22 !== null) {
                var result27 = parse_expr_com();
                var result23 = result27 !== null ? result27 : '';
                if (result23 !== null) {
                  var result24 = parse__();
                  if (result24 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result25 = ")";
                      pos += 1;
                    } else {
                      var result25 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result25 !== null) {
                      var result26 = parse__();
                      if (result26 !== null) {
                        var result17 = [result19, result20, result21, result22, result23, result24, result25, result26];
                      } else {
                        var result17 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos7;
                }
              } else {
                var result17 = null;
                pos = savedPos7;
              }
            } else {
              var result17 = null;
              pos = savedPos7;
            }
          } else {
            var result17 = null;
            pos = savedPos7;
          }
        } else {
          var result17 = null;
          pos = savedPos7;
        }
        var result18 = result17 !== null
          ? (function(fun, val) { return fun ? calculator.functions[fun].apply(this, val || []) : val; })(result17[0], result17[4])
          : null;
        if (result18 !== null) {
          var result16 = result18;
        } else {
          var result16 = null;
          pos = savedPos6;
        }
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result14 = parse_identifyer();
          if (result14 !== null) {
            var result15 = parse__();
            if (result15 !== null) {
              var result12 = [result14, result15];
            } else {
              var result12 = null;
              pos = savedPos5;
            }
          } else {
            var result12 = null;
            pos = savedPos5;
          }
          var result13 = result12 !== null
            ? (function(val) { return calculator.constants[val] || calculator.variables[val]; })(result12[0])
            : null;
          if (result13 !== null) {
            var result11 = result13;
          } else {
            var result11 = null;
            pos = savedPos4;
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result9 = parse_integer();
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result7 = [result9, result10];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(val) { return parseInt(val); })(result7[0])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = parse_number();
              if (result4 !== null) {
                var result5 = parse__();
                if (result5 !== null) {
                  var result2 = [result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(val) { return parseFloat(val); })(result2[0])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_unr() {
        var cacheKey = 'expr_unr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos, 1) === "+") {
          var result20 = "+";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result20 !== null) {
          var result21 = parse_expr_unr();
          if (result21 !== null) {
            var result18 = [result20, result21];
          } else {
            var result18 = null;
            pos = savedPos7;
          }
        } else {
          var result18 = null;
          pos = savedPos7;
        }
        var result19 = result18 !== null
          ? (function(rhs) { return rhs; })(result18[1])
          : null;
        if (result19 !== null) {
          var result17 = result19;
        } else {
          var result17 = null;
          pos = savedPos6;
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === "-") {
            var result15 = "-";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result15 !== null) {
            var result16 = parse_expr_unr();
            if (result16 !== null) {
              var result13 = [result15, result16];
            } else {
              var result13 = null;
              pos = savedPos5;
            }
          } else {
            var result13 = null;
            pos = savedPos5;
          }
          var result14 = result13 !== null
            ? (function(rhs) { return -rhs; })(result13[1])
            : null;
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result12 = null;
            pos = savedPos4;
          }
          if (result12 !== null) {
            var result0 = result12;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === "~") {
              var result10 = "~";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"~\"");
              }
            }
            if (result10 !== null) {
              var result11 = parse_expr_unr();
              if (result11 !== null) {
                var result8 = [result10, result11];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            var result9 = result8 !== null
              ? (function(rhs) { return ~rhs; })(result8[1])
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "!") {
                var result5 = "!";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!\"");
                }
              }
              if (result5 !== null) {
                var result6 = parse_expr_unr();
                if (result6 !== null) {
                  var result3 = [result5, result6];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
              var result4 = result3 !== null
                ? (function(rhs) { return rhs ? 1 : 0; })(result3[1])
                : null;
              if (result4 !== null) {
                var result2 = result4;
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_expr_pri();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_mul() {
        var cacheKey = 'expr_mul@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_unr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "**") {
              var result13 = "**";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"**\"");
              }
            }
            if (result13 !== null) {
              var result7 = result13;
            } else {
              if (input.substr(pos, 1) === "*") {
                var result12 = "*";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 1) === "/") {
                  var result11 = "/";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  if (input.substr(pos, 1) === "%") {
                    var result10 = "%";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"%\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_unr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "**") {
                var result13 = "**";
                pos += 2;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"**\"");
                }
              }
              if (result13 !== null) {
                var result7 = result13;
              } else {
                if (input.substr(pos, 1) === "*") {
                  var result12 = "*";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*\"");
                  }
                }
                if (result12 !== null) {
                  var result7 = result12;
                } else {
                  if (input.substr(pos, 1) === "/") {
                    var result11 = "/";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/\"");
                    }
                  }
                  if (result11 !== null) {
                    var result7 = result11;
                  } else {
                    if (input.substr(pos, 1) === "%") {
                      var result10 = "%";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"%\"");
                      }
                    }
                    if (result10 !== null) {
                      var result7 = result10;
                    } else {
                      var result7 = null;;
                    };
                  };
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_unr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		var rhs = op[i];
          		switch (rhs[1]) {
          			case '**': lhs = Math.pow(lhs, rhs[3]); break;
          			case '*': lhs *= rhs[3]; break;
          			case '/': lhs /= rhs[3]; break;
          			case '%': lhs %= rhs[3]; break;
          		}
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_add() {
        var cacheKey = 'expr_add@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_mul();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result11 = "+";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result11 !== null) {
              var result7 = result11;
            } else {
              if (input.substr(pos, 1) === "-") {
                var result10 = "-";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result10 !== null) {
                var result7 = result10;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_mul();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result11 = "+";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 1) === "-") {
                  var result10 = "-";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_mul();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		var rhs = op[i];
          		switch (rhs[1]) {
          			case '+': lhs += rhs[3]; break;
          			case '-': lhs -= rhs[3]; break;
          		}
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_shr() {
        var cacheKey = 'expr_shr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_add();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "<<") {
              var result12 = "<<";
              pos += 2;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"<<\"");
              }
            }
            if (result12 !== null) {
              var result7 = result12;
            } else {
              if (input.substr(pos, 3) === ">>>") {
                var result11 = ">>>";
                pos += 3;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\">>>\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 2) === ">>") {
                  var result10 = ">>";
                  pos += 2;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">>\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_add();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "<<") {
                var result12 = "<<";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<<\"");
                }
              }
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 3) === ">>>") {
                  var result11 = ">>>";
                  pos += 3;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">>>\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  if (input.substr(pos, 2) === ">>") {
                    var result10 = ">>";
                    pos += 2;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">>\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_add();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		var rhs = op[i];
          		switch (rhs[1]) {
          			case '<<': lhs <<= rhs[3]; break;
          			case '>>': lhs >>= rhs[3]; break;
          			case '>>>': lhs >>>= rhs[3]; break;
          		}
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_rel() {
        var cacheKey = 'expr_rel@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_shr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "<=") {
              var result13 = "<=";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"<=\"");
              }
            }
            if (result13 !== null) {
              var result7 = result13;
            } else {
              if (input.substr(pos, 1) === "<") {
                var result12 = "<";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<\"");
                }
              }
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 2) === ">=") {
                  var result11 = ">=";
                  pos += 2;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">=\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  if (input.substr(pos, 1) === ">") {
                    var result10 = ">";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_shr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "<=") {
                var result13 = "<=";
                pos += 2;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<=\"");
                }
              }
              if (result13 !== null) {
                var result7 = result13;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result12 = "<";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result12 !== null) {
                  var result7 = result12;
                } else {
                  if (input.substr(pos, 2) === ">=") {
                    var result11 = ">=";
                    pos += 2;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result11 !== null) {
                    var result7 = result11;
                  } else {
                    if (input.substr(pos, 1) === ">") {
                      var result10 = ">";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result10 !== null) {
                      var result7 = result10;
                    } else {
                      var result7 = null;;
                    };
                  };
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_shr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		var rhs = op[i];
          		switch (rhs[1]) {
          			case '<': lhs = lhs < rhs[3] ? 1 : 0; break;
          			case '<=': lhs = lhs <= rhs[3] ? 1 : 0; break;
          			case '>': lhs = lhs > rhs[3] ? 1 : 0; break;
          			case '>=': lhs = lhs >= rhs[3] ? 1 : 0; break;
          		}
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_equ() {
        var cacheKey = 'expr_equ@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_rel();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "==") {
              var result11 = "==";
              pos += 2;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"==\"");
              }
            }
            if (result11 !== null) {
              var result7 = result11;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result10 = "!=";
                pos += 2;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result10 !== null) {
                var result7 = result10;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_rel();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "==") {
                var result11 = "==";
                pos += 2;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"==\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 2) === "!=") {
                  var result10 = "!=";
                  pos += 2;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_rel();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		var rhs = op[i];
          		switch (rhs[1]) {
          			case '==': lhs = lhs == rhs[3] ? 1 : 0; break;
          			case '!=': lhs = lhs != rhs[3] ? 1 : 0; break;
          		}
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_and() {
        var cacheKey = 'expr_and@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_equ();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "&") {
              var result7 = "&";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_equ();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "&") {
                var result7 = "&";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"&\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_equ();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		lhs &= op[i][3];
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_xor() {
        var cacheKey = 'expr_xor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_and();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "^") {
              var result7 = "^";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_and();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "^") {
                var result7 = "^";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"^\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_and();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		lhs ^= op[i][3];
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_ior() {
        var cacheKey = 'expr_ior@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_xor();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result7 = "|";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_xor();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "|") {
                var result7 = "|";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_xor();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; i < op.length; i += 1) {
          		lhs |= op[i][3];
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_lnd() {
        var cacheKey = 'expr_lnd@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_ior();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result7 = "&&";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&&\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_ior();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "&&") {
                var result7 = "&&";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"&&\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_ior();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; lhs && i < op.length; i += 1) {
          		lhs = op[i][3];
          	}
          	return lhs;// ? 1 : 0;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_lor() {
        var cacheKey = 'expr_lor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_lnd();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "||") {
              var result7 = "||";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"||\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_lnd();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result7 = "||";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"||\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_lnd();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	for (var i = 0; !lhs && i < op.length; i += 1) {
          		lhs = op[i][3];
          	}
          	return lhs;// ? 1 : 0;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_sel() {
        var cacheKey = 'expr_sel@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_expr_lor();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "?") {
              var result7 = "?";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_sel();
                if (result9 !== null) {
                  var result10 = parse__();
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === ":") {
                      var result11 = ":";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result11 !== null) {
                      var result12 = parse__();
                      if (result12 !== null) {
                        var result13 = parse_expr_sel();
                        if (result13 !== null) {
                          var result3 = [result5, result6, result7, result8, result9, result10, result11, result12, result13];
                        } else {
                          var result3 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(tst, lhs, rhs) {	// this is right to left !!!
          	return tst ? lhs : rhs;
          })(result3[0], result3[4], result3[8])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_expr_lor();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_set() {
        var cacheKey = 'expr_set@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_identifyer();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result22 = "=";
              pos += 1;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result22 !== null) {
              var result7 = result22;
            } else {
              if (input.substr(pos, 3) === "**=") {
                var result21 = "**=";
                pos += 3;
              } else {
                var result21 = null;
                if (reportMatchFailures) {
                  matchFailed("\"**=\"");
                }
              }
              if (result21 !== null) {
                var result7 = result21;
              } else {
                if (input.substr(pos, 2) === "*=") {
                  var result20 = "*=";
                  pos += 2;
                } else {
                  var result20 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*=\"");
                  }
                }
                if (result20 !== null) {
                  var result7 = result20;
                } else {
                  if (input.substr(pos, 2) === "/=") {
                    var result19 = "/=";
                    pos += 2;
                  } else {
                    var result19 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/=\"");
                    }
                  }
                  if (result19 !== null) {
                    var result7 = result19;
                  } else {
                    if (input.substr(pos, 2) === "%=") {
                      var result18 = "%=";
                      pos += 2;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"%=\"");
                      }
                    }
                    if (result18 !== null) {
                      var result7 = result18;
                    } else {
                      if (input.substr(pos, 2) === "+=") {
                        var result17 = "+=";
                        pos += 2;
                      } else {
                        var result17 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"+=\"");
                        }
                      }
                      if (result17 !== null) {
                        var result7 = result17;
                      } else {
                        if (input.substr(pos, 2) === "-=") {
                          var result16 = "-=";
                          pos += 2;
                        } else {
                          var result16 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"-=\"");
                          }
                        }
                        if (result16 !== null) {
                          var result7 = result16;
                        } else {
                          if (input.substr(pos, 3) === "<<=") {
                            var result15 = "<<=";
                            pos += 3;
                          } else {
                            var result15 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"<<=\"");
                            }
                          }
                          if (result15 !== null) {
                            var result7 = result15;
                          } else {
                            if (input.substr(pos, 4) === ">>>=") {
                              var result14 = ">>>=";
                              pos += 4;
                            } else {
                              var result14 = null;
                              if (reportMatchFailures) {
                                matchFailed("\">>>=\"");
                              }
                            }
                            if (result14 !== null) {
                              var result7 = result14;
                            } else {
                              if (input.substr(pos, 3) === ">>=") {
                                var result13 = ">>=";
                                pos += 3;
                              } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\">>=\"");
                                }
                              }
                              if (result13 !== null) {
                                var result7 = result13;
                              } else {
                                if (input.substr(pos, 2) === "&=") {
                                  var result12 = "&=";
                                  pos += 2;
                                } else {
                                  var result12 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"&=\"");
                                  }
                                }
                                if (result12 !== null) {
                                  var result7 = result12;
                                } else {
                                  if (input.substr(pos, 2) === "^=") {
                                    var result11 = "^=";
                                    pos += 2;
                                  } else {
                                    var result11 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"^=\"");
                                    }
                                  }
                                  if (result11 !== null) {
                                    var result7 = result11;
                                  } else {
                                    if (input.substr(pos, 2) === "|=") {
                                      var result10 = "|=";
                                      pos += 2;
                                    } else {
                                      var result10 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"|=\"");
                                      }
                                    }
                                    if (result10 !== null) {
                                      var result7 = result10;
                                    } else {
                                      var result7 = null;;
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_set();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(lhs, op, rhs) {	// TODO: these are right to left !!!
          	switch (op) {
          		case '=': calculator.variables[lhs] = rhs; break;
          		case '**=': calculator.variables[lhs] = Math.pow(calculator.variables[lhs], rhs); break;
          		case '*=': calculator.variables[lhs] *= rhs; break;
          		case '/=': calculator.variables[lhs] /= rhs; break;
          		case '%=': calculator.variables[lhs] %= rhs; break;
          		case '+=': calculator.variables[lhs] += rhs; break;
          		case '-=': calculator.variables[lhs] -= rhs; break;
          		case '<<=': calculator.variables[lhs] <<= rhs; break;
          		case '>>=': calculator.variables[lhs] >>= rhs; break;
          		case '>>>=': calculator.variables[lhs] >>>= rhs; break;
          		case '&=': calculator.variables[lhs] &= rhs; break;
          		case '^=': calculator.variables[lhs] ^= rhs; break;
          		case '|=': calculator.variables[lhs] |= rhs; break;
          	}
          	return lhs;
          })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_expr_sel();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr_com() {
        var cacheKey = 'expr_com@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expr_set();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_expr_set();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_expr_set();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, op) {
          	lhs = [lhs];
          	for (var i = 0; i < op.length; i += 1) {
          		lhs[lhs.length] = op[i][3];
          	}
          	return lhs;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "0x") {
          var result10 = "0x";
          pos += 2;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"0x\"");
          }
        }
        if (result10 !== null) {
          if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
            var result12 = input.charAt(pos);
            pos++;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9a-fA-F]");
            }
          }
          if (result12 !== null) {
            var result11 = [];
            while (result12 !== null) {
              result11.push(result12);
              if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-fA-F]");
                }
              }
            }
          } else {
            var result11 = null;
          }
          if (result11 !== null) {
            var result8 = [result10, result11];
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(d1) {return '0x' + d1.join(''); })(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 2) === "0o") {
            var result4 = "0o";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"0o\"");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^[0-7]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-7]");
              }
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                if (input.substr(pos).match(/^[0-7]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-7]");
                  }
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(d1) {return '0' + d1.join(''); })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result27 = parse_digits();
        if (result27 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result28 = ".";
            pos += 1;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result28 !== null) {
            var result29 = parse_digits();
            if (result29 !== null) {
              var result32 = parse_exp();
              var result30 = result32 !== null ? result32 : '';
              if (result30 !== null) {
                var result31 = parse__();
                if (result31 !== null) {
                  var result25 = [result27, result28, result29, result30, result31];
                } else {
                  var result25 = null;
                  pos = savedPos7;
                }
              } else {
                var result25 = null;
                pos = savedPos7;
              }
            } else {
              var result25 = null;
              pos = savedPos7;
            }
          } else {
            var result25 = null;
            pos = savedPos7;
          }
        } else {
          var result25 = null;
          pos = savedPos7;
        }
        var result26 = result25 !== null
          ? (function(d1, d2, d3, d4) {return d1 + d2 + d3 + d4;})(result25[0], result25[1], result25[2], result25[3])
          : null;
        if (result26 !== null) {
          var result24 = result26;
        } else {
          var result24 = null;
          pos = savedPos6;
        }
        if (result24 !== null) {
          var result0 = result24;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result19 = parse_digits();
          if (result19 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result20 = ".";
              pos += 1;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result20 !== null) {
              var result23 = parse_exp();
              var result21 = result23 !== null ? result23 : '';
              if (result21 !== null) {
                var result22 = parse__();
                if (result22 !== null) {
                  var result17 = [result19, result20, result21, result22];
                } else {
                  var result17 = null;
                  pos = savedPos5;
                }
              } else {
                var result17 = null;
                pos = savedPos5;
              }
            } else {
              var result17 = null;
              pos = savedPos5;
            }
          } else {
            var result17 = null;
            pos = savedPos5;
          }
          var result18 = result17 !== null
            ? (function(d1, d2, d3) {return d1 + d2 + d3;})(result17[0], result17[1], result17[2])
            : null;
          if (result18 !== null) {
            var result16 = result18;
          } else {
            var result16 = null;
            pos = savedPos4;
          }
          if (result16 !== null) {
            var result0 = result16;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ".") {
              var result11 = ".";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result11 !== null) {
              var result12 = parse_digits();
              if (result12 !== null) {
                var result15 = parse_exp();
                var result13 = result15 !== null ? result15 : '';
                if (result13 !== null) {
                  var result14 = parse__();
                  if (result14 !== null) {
                    var result9 = [result11, result12, result13, result14];
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
            var result10 = result9 !== null
              ? (function(d1, d2, d3) {return d1 + d2 + d3;})(result9[0], result9[1], result9[2])
              : null;
            if (result10 !== null) {
              var result8 = result10;
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = parse_digits();
              if (result4 !== null) {
                var result7 = parse_exp();
                var result5 = result7 !== null ? result7 : '';
                if (result5 !== null) {
                  var result6 = parse__();
                  if (result6 !== null) {
                    var result2 = [result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(d1, d2) {return d1 + d2;})(result2[0], result2[1])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exp() {
        var cacheKey = 'exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            var result5 = parse_digits();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d1, d2, d3) { return d1 + d2 + d3; })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_digits() {
        var cacheKey = 'digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d1) { return d1.join(''); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifyer() {
        var cacheKey = 'identifyer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[_a-zA-Z]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[_a-zA-Z]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[_a-zA-Z0-9]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d1, chars) { return d1 + chars.join(''); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[	\n\r ]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[	\\n\\r ]");
          }
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[	\n\r ]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[	\\n\\r ]");
            }
          }
        }
        var result2 = result1 !== null
          ? (function() {})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
